import {AbstractWebService} from './abstract-web-service';
import {Ticket} from './ticket';
import {Activity} from './activity';

export class ActivityWebService extends AbstractWebService {
  constructor(protected url: string, protected username: string, protected password: string) {
    super(url, username, password);
  }

  public getServiceSpecificUrl() {
    return this.serverUrl + '/drawing/activities';
  }

  public getRelevantData(data: {activities: Activity[]; ticket: Ticket}) {
    data.activities = data.activities.map(a => {
      return Activity.fromObject(a);
    });
    data.ticket = new Ticket(data.ticket, this.getServerUrl(), this);
    return data;
  }

  public loadData(successCall: Function, errorCall: Function, msg) {
    let timestamp = Date.now() - 1000 * 3600 * 1000;
    super.loadData(successCall, errorCall, {active_after: timestamp});
  }
}
